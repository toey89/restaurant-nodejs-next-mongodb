{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* _app.js */\nimport React from \"react\";\nimport App from \"next/app\";\nimport Head from \"next/head\";\nimport Cookie from \"js-cookie\";\nimport fetch from \"isomorphic-fetch\";\nimport Layout from \"../components/Layout\";\nimport AppContext from \"../context/AppContext\";\nimport withData from \"../lib/apollo\";\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      user: null,\n      cart: {\n        items: [],\n        total: 0\n      }\n    });\n\n    _defineProperty(this, \"setUser\", user => {\n      this.setState({\n        user\n      });\n    });\n\n    _defineProperty(this, \"addItem\", item => {\n      let {\n        items\n      } = this.state.cart; //check for item already in cart\n      //if not in cart, add item if item is found increase quanity ++\n\n      const newItem = items.find(i => i.id === item.id); // if item is not new, add to cart, set quantity to 1\n\n      if (!newItem) {\n        //set quantity property to 1\n        item.quantity = 1;\n        console.log(this.state.cart.total, item.price);\n        this.setState({\n          cart: {\n            items: [...items, item],\n            total: this.state.cart.total + item.price\n          }\n        }, () => Cookie.set(\"cart\", this.state.cart.items));\n      } else {\n        this.setState({\n          cart: {\n            items: this.state.cart.items.map(item => item.id === newItem.id ? Object.assign({}, item, {\n              quantity: item.quantity + 1\n            }) : item),\n            total: this.state.cart.total + item.price\n          }\n        }, () => Cookie.set(\"cart\", this.state.cart.items));\n      }\n    });\n\n    _defineProperty(this, \"removeItem\", item => {\n      let {\n        items\n      } = this.state.cart; //check for item already in cart\n      //if not in cart, add item if item is found increase quanity ++\n\n      const newItem = items.find(i => i.id === item.id);\n\n      if (newItem.quantity > 1) {\n        this.setState({\n          cart: {\n            items: this.state.cart.items.map(item => item.id === newItem.id ? Object.assign({}, item, {\n              quantity: item.quantity - 1\n            }) : item),\n            total: this.state.cart.total - item.price\n          }\n        }, () => Cookie.set(\"cart\", this.state.items));\n      } else {\n        const items = [...this.state.cart.items];\n        const index = items.findIndex(i => i.id === newItem.id);\n        items.splice(index, 1);\n        this.setState({\n          cart: {\n            items: items,\n            total: this.state.cart.total - item.price\n          }\n        }, () => Cookie.set(\"cart\", this.state.items));\n      }\n    });\n  }\n\n  componentDidMount() {\n    const token = Cookie.get(\"token\"); // restore cart from cookie, this could also be tracked in a db\n\n    const cart = Cookie.get(\"cart\"); //if items in cart, set items and total from cookie\n\n    console.log(cart);\n\n    if (typeof cart === \"string\" && cart !== \"undefined\") {\n      console.log(\"foyd\");\n      JSON.parse(cart).forEach(item => {\n        this.setState({\n          cart: {\n            items: JSON.parse(cart),\n            total: item.price * item.quantity\n          }\n        });\n      });\n    }\n\n    if (token) {\n      // authenticate the token on the server and place set user object\n      fetch(\"http://localhost:1337/users/me\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(async res => {\n        // if res comes back not valid, token is not valid\n        // delete the token and log the user out on client\n        if (!res.ok) {\n          Cookie.remove(\"token\");\n          this.setState({\n            user: null\n          });\n          return null;\n        }\n\n        const user = await res.json();\n        this.setUser(user);\n      });\n    }\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(AppContext.Provider, {\n      value: {\n        user: this.state.user,\n        isAuthenticated: !!this.state.user,\n        setUser: this.setUser,\n        cart: this.state.cart,\n        addItem: this.addItem,\n        removeItem: this.removeItem\n      }\n    }, __jsx(Head, null, __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\",\n      integrity: \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\",\n      crossOrigin: \"anonymous\"\n    })), __jsx(Layout, null, __jsx(Component, pageProps)));\n  }\n\n}\n\nexport default withData(MyApp);","map":null,"metadata":{},"sourceType":"module"}