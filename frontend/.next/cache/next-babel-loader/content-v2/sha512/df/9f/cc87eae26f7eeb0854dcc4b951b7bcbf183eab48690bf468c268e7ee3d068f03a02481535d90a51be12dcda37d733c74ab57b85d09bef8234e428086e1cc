{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, component } from 'react'; //import SimpleUploadAdapter from '@ckeditor/ckeditor5-upload/src/adapters/simpleuploadadapter';\n//import * as customEditor from './ckeditor2';\n//import MyCustomUploadAdapterPlugin from './MyUploadAdapter';\n\nimport ClassicEditor from 'ckeditor-build-with-simple-upload-provider-strapi';\n\nfunction Ckeditor(props) {\n  var editorRef = useRef();\n\n  var _useState = useState(false),\n      editorLoaded = _useState[0],\n      setEditorLoaded = _useState[1]; //const { CKEditor, ClassicEditor } = editorRef.current || {}\n\n\n  var _ref = editorRef.current || {},\n      CKEditor = _ref.CKEditor,\n      customEditor = _ref.customEditor; //const Editor = customEditor;\n\n\n  useEffect(function () {\n    editorRef.current = {\n      CKEditor: require('@ckeditor/ckeditor5-react').CKEditor //ClassicEditor: require('@ckeditor/ckeditor5-build-classic'),\n      //customEditor: require('./ckeditor2'),\n\n    };\n    setEditorLoaded(true);\n  }, []);\n  return editorLoaded ? __jsx(CKEditor, {\n    config: {\n      removePlugins: ['ImageCaption'],\n      simpleUpload: {\n        uploadUrl: \"\".concat(process.env.NEXT_PUBLIC_API_URL, \"/upload\")\n      },\n\n      /*simpleUpload: {\r\n        // The URL that the images are uploaded to.\r\n        uploadUrl: \"http://localhost:1337/uploads/\",\r\n          // Enable the XMLHttpRequest.withCredentials property.\r\n        withCredentials: true,\r\n          // Headers sent along with the XMLHttpRequest to the upload server.\r\n        headers: {\r\n          \"X-CSRF-TOKEN\": \"CSRF-Token\",\r\n          Authorization: \"Bearer <JSON Web Token>\",\r\n        },\r\n      },*/\n      //extraPlugins: [MyCustomUploadAdapterPlugin],\n      //plugins: [ UploadAdapter ],\n\n      /*ckfinder: {\r\n        // eslint-disable-next-line max-len\r\n        uploadUrl: 'http://localhost:1337/uploads/'\r\n      },*/\n      toolbar: {\n        shouldNotGroupWhenFull: true,\n        items: ['heading', '|', 'bold', 'italic', '|', 'bulletedList', 'numberedList', '|', 'insertTable', '|', 'imageUpload', '|', 'undo', 'redo']\n      },\n      image: {\n        toolbar: ['imageStyle:alignLeft', 'imageStyle:alignCenter', 'imageStyle:alignRight', 'imageStyle:full', 'imageStyle:side', '|', 'imageTextAlternative'],\n        styles: ['alignLeft', 'alignCenter', 'alignRight']\n      },\n      table: {\n        contentToolbar: ['tableColumn', 'tableRow', 'mergeTableCells']\n      },\n      language: 'en'\n    } //ngModel={notification.body}\n    ,\n    editor: ClassicEditor,\n    data: props.value,\n    onReady: function onReady(editor) {\n      // You can store the \"editor\" and use when it is needed.\n      console.log('Editor is ready to use!', editor);\n    },\n    onChange: function onChange(event, editor) {\n      var data = editor.getData();\n      console.log({\n        event: event,\n        editor: editor,\n        data: data\n      });\n      props.onChange(data);\n    }\n  }) : __jsx(\"div\", null, \"Editor loading\");\n}\n\nexport default Ckeditor;","map":null,"metadata":{},"sourceType":"module"}